@using SequelyMAUI.Entities
@using System.Data
@using DataAnnotationsExtensions
@using System.ComponentModel

@inject IDbService _DbService

<div style="display: flex; width: 25%; justify-content:center;">
    <MudTextField T="string" @bind-Value="@TableName" Label="Table Name" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
     <MudButton Color="Color.Primary" Size="Size.Small" OnClick="@AddField" Variant="Variant.Filled">Add Field</MudButton>
     <MudButton Color="Color.Primary" Size="Size.Small" OnClick="@CreateTable" Variant="Variant.Filled">Create Table</MudButton>

</div>

<MudStack>

@foreach (var field in Fields)
{
    <MudPaper Class="pa-4">
        <MudStack>
            <div style="display: flex; justify-content: space-between;">
                <MudStack Row="true">
                        <MudTextField T="string" @bind-Value="@(field.Name)" Label="Field Name" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                        <MudSelect T="string" @bind-Value="@(field.Index)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Index">
                            <MudSelectItem Value="@("None")" Label="None"/>
                            <MudSelectItem Value="@("Primary")" Label="Primaryyyy"/>
                            <MudSelectItem Value="@("Unique")" Label="Unique"/>
                        </MudSelect>
                </MudStack>
                
                
                <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="@(() => RemoveField(field))"/>
            </div>

            <MudStack Row="true">
                <MudSelect T="string" @bind-Value="@(field.Type)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Type">
                    <MudSelectItem Value="@("Char")" Label="Char"></MudSelectItem>
                    <MudSelectItem Value="@("Varchar")" Label="Varchar"></MudSelectItem>
                    <MudSelectItem Value="@("Int")" Label="Int"></MudSelectItem>
                    <MudSelectItem Value="@("Float")" Label="Float"></MudSelectItem>
                    <MudSelectItem Value="@("Double")" Label="Float"></MudSelectItem>
                    <MudSelectItem Value="@("Date")" Label="Date"></MudSelectItem>
                    <MudSelectItem Value="@("Time")" Label="Time"></MudSelectItem>
                    <MudSelectItem Value="@("DateTime")" Label="Datetime"></MudSelectItem>
                </MudSelect>

                @if(new List<string> {"Char", "Varchar", "Int", "Float", "Double"}.Contains(field.Type))
                {
                    <MudNumericField @bind-Value="@(field.Size)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Size" />

                    @if (new List<string> { "Float", "Double" }.Contains(field.Type))
                    {
                        <MudNumericField @bind-Value="@(field.Digits)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Digits" />
                    }
                }

                <MudCheckBox @bind-Value="@(field.AutoIncrement)" Label="Auto Increment" />

            </MudStack>
            <MudStack Row="true">
                <MudTextField @bind-Value="@(field.Default)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Default" Disabled="@(field.Index == "Primary" || field.Index == "Unique" || !field.NotNull)"/>
                
                <MudCheckBox @bind-Value="@(field.NotNull)" Label="Not Null" />
            </MudStack>
            <MudStack Row="true">

                <MudCheckBox @bind-Value="@(field.Foreign)" Label="Foreign key"/>

                @if(field.Foreign)
                {
                    <MudSelect T="string" @bind-Value="@(field.ReferencedTable)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Referenced Table">
                        <MudSelectItem Value="@("Table 1")" Label="Table 1"></MudSelectItem>
                        <MudSelectItem Value="@("Table 2")" Label="Table 2"></MudSelectItem>
                        <MudSelectItem Value="@("Table 3")" Label="Table 3"></MudSelectItem>
                    </MudSelect>

                    <MudSelect T="string" @bind-Value="@(field.ReferencedColumn)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Referenced Column">
                        <MudSelectItem Value="@("Column 1")" Label="Column 1"></MudSelectItem>
                        <MudSelectItem Value="@("Column 2")" Label="Column 2"></MudSelectItem>
                        <MudSelectItem Value="@("Column 3")" Label="Column 3"></MudSelectItem>
                    </MudSelect>

                    <MudSelect T="string" @bind-Value="@(field.OnDelete)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="On Delete">
                        <MudSelectItem Value="@("No Action")" Label="Cascade"></MudSelectItem>
                        <MudSelectItem Value="@("Cascade")" Label="Cascade"></MudSelectItem>
                        <MudSelectItem Value="@("Set Null")" Label="Set Null"></MudSelectItem>
                    </MudSelect>
                }

                    
            </MudStack>
        </MudStack>
    </MudPaper>
    
}
</MudStack>



@code 
{
    [CascadingParameter(Name = "TabEntity")]
    public TabEntity TabEntity { get; set; } = new TabEntity();

    public string TableName { get; set; } = "";


    public List<DataRow> InsertingRows = new List<DataRow>(); 

    public enum OnDeleteType
    {
        Cascade,
        SetNull,
        NoAction
    }

    private class Field
    {
        public string? Name { get; set; }
        public string Type { get; set; } = "Char";
        public UInt16? Size { get; set; } = 1;
        public UInt16? Digits { get; set; } = 1;

        public bool NotNull { get; set; } = false;
        public string? Default { get; set; }
        public bool AutoIncrement { get; set; } = false;

        public string Index { get; set; } = "None";



        public bool Foreign { get; set; } = false;
        public string? ReferencedTable { get; set; }
        public string? ReferencedColumn { get; set; }
        public string OnDelete { get; set; } = "No Action";
    }

    private List<Field> Fields = new List<Field>();

    protected override void OnInitialized()
    {

        Fields.Add(new Field());

    }

    private void AddField()
    {
        Fields.Add(new Field());
    }

    private void RemoveField(Field field)
    {
        Fields.Remove(field);
    }

    private async Task CreateTable()
    {
        try
        {
            await _DbService.RunQueryAsync($"USE `{TabEntity.Name}`");
        }

        catch (Exception e)
        {
            await App.Current!.MainPage!.DisplayAlert("Error", e.Message, "OK");
        }
        string query = $"CREATE TABLE {TableName} (";

        query += string.Join(", ", Fields.Select(f => $"{f.Name} {f.Type}({f.Size}) {(f.NotNull ? "NOT NULL" : "")} {(f.Default != null ? $"DEFAULT {f.Default}" : "")} {(f.AutoIncrement ? "AUTO_INCREMENT" : "")} {(f.Index == "Primary" ? "PRIMARY KEY" : "")} {(f.Index == "Unique" ? "UNIQUE" : "")}"));
        
        if(Fields.Any(f => f.Foreign))
        {
            query += ", ";
            query += string.Join(", ", Fields.Where(f => f.Foreign).Select(f => $"FOREIGN KEY ({f.Name}) REFERENCES {f.ReferencedTable}({f.ReferencedColumn}) ON DELETE {f.OnDelete}"));
        }
        
        query += ");";
        Debug.WriteLine(query);

        try
        {
            await _DbService.RunQueryAsync(query);
        }
        catch (Exception e)
        {
            await App.Current!.MainPage!.DisplayAlert("Error", e.Message, "OK");
        }
    }
}
