@using SequelyMAUI.Entities
@using SequelyMAUI.Models
@inject IConnectionService _ConnectionService
@inject ITabService _TabService
@inject IDbService _DbService

<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet">

<MudTreeView ServerData="LoadTables" Items="dbTreeItems" Hover="true" Color="Color.Info">
    <ItemTemplate>
        <MudTreeViewItem Value="@context" Icon="@context.Icon" LoadingIconColor="Color.Info" CanExpand="@context.CanExpand" Text="@context.Title" OnDoubleClick="@(() => AddTab(context))"/>
    </ItemTemplate>
</MudTreeView>
        

@code 
{
    [Parameter]
    public List<DatabaseEntity> Databases { get; set; } = new List<DatabaseEntity>();

    [Parameter]
    public EventCallback UpdateParentState { get; set; }

    public HashSet<TreeItemData> dbTreeItems { get; set; } = new HashSet<TreeItemData>();


    // protected override void OnInitialized()
    // {
    //     Debug.WriteLine("DatabaseTreeView: OnInitializedAsync");

    //     foreach (var db in Databases)
    //         dbTreeItems.Add(new TreeItemData(db));
    // }

    protected override void OnParametersSet()
    {

        dbTreeItems.Clear();

        foreach (var db in Databases)
            dbTreeItems.Add(new TreeItemData(db));
    }


    public class TreeItemData
    {
        public SqlEntity Value { get; set; }

        public string Title { get; set; }
        public string Icon { get; set; }
        public bool CanExpand { get; set; }

        public HashSet<TreeItemData>? TreeItems { get; set; }

        public TreeItemData(SqlEntity value)
        {
            Value = value;
            Title = value.Name;

            if(Value is DatabaseEntity)
            {
                Icon = "fas fa-database";
                CanExpand = true;
            }
            else if(Value is TableEntity)
            {
                Icon = Icons.Material.Filled.TableChart;
                CanExpand = false;
            }

            else
                throw new Exception("Invalid type");
        }

    }

            /*
                *
                try
                {
                Data = _TabService.RetrieveCachedData(TabEntity);

    if (Data == null)
    {
        Data = await _DbService.RunQueryAsync(TabEntity.Query);
        _TabService.CacheData(TabEntity, Data);
    }

    hasInitializationFinished = true;
        }
        catch (Exception ex)
             {
     await Application.Current!.MainPage!.DisplayAlert("Error", ex.Message, "Cancel");
     await _TabService.DeleteTab(TabEntity);
     await UpdateParentState.InvokeAsync();
     }
     *
     */



    private async Task<HashSet<TreeItemData>> LoadTables(TreeItemData db)
    {
        var tables = await _DbService.GetTables((db.Value as DatabaseEntity)!);

        return tables.Select(t => new TreeItemData(t)).ToHashSet();

    }

    private async Task AddTab(TreeItemData context)
    {
        Debug.WriteLine($"Addinging tab for {context.Title}");
        try
        {
            await _TabService.CreateTab(context.Value);
            await UpdateParentState.InvokeAsync();
        }
        catch (Exception ex)
        {
            await Application.Current!.MainPage!.DisplayAlert("Error", ex.Message, "OK");
        }
    }
}