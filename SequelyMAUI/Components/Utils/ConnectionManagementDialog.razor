@using SequelyMAUI.Entities
@using SequelyMAUI.Components.Utils

@inject IConnectionService _ConnectionService
@inject IDialogService _DialogService 


<MudDialog Style="width: 20vw;">
    <DialogContent>
        <MudForm @bind-IsValid="@success" @ref="@form">
            <MudTextField T="string" Required="true" @bind-Value="@connectionModel!.Name" For="@(() => connectionModel!.Name)"/>
            <div class="d-inline-flex gap-6 my-4">
                <MudTextField T="string" Required="true" @bind-Value="@connectionModel.Address" For="@(() => connectionModel.Address)" />
                <MudTextField T="int?" Required="true" @bind-Value="@connectionModel.Port" For="@(() => connectionModel.Port)" />
            </div>
            <div class="d-inline-flex gap-6 my-4">
                <MudTextField T="string" Label="Username" Required="true" @bind-Value="@connectionModel.Username" For="@(() => connectionModel.Username)" />
                <MudTextField T="string" Label="Password" Required="true" @bind-Value="@connectionModel.Password" For="@(() => connectionModel.Password)" />
            </div>
                   
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudPaper Elevation="0" Class="d-flex justify-space-between flex-grow-1 gap-4">
            @if(incomingConnection != null)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete" OnClick="DeleteConnection"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Info" Disabled=@(incomingConnection.IsIdenticalTo(connectionModel) || !form.IsValid) aria-label="save" OnClick="OverwriteConnection"></MudIconButton>
            }
            <MudPaper Class="d-flex flex-row-reverse gap-4" Elevation="0">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled=@(!form.IsValid || (incomingConnection != null && !incomingConnection.IsIdenticalTo(connectionModel))) Class="ml-auto" OnClick="Connect">Connect</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled=@(!form.IsValid) Class="ml-auto" OnClick="TestConnection">Test</MudButton>
            </MudPaper>
        </MudPaper>
        
        
    </DialogActions>
</MudDialog>



@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();
    [Parameter] public ConnectionEntity? incomingConnection { get; set;}


    MudForm form = new MudForm();
    List<ConnectionOperationType> connectionOperations = new List<ConnectionOperationType>();
    ConnectionEntity connectionModel = new ConnectionEntity();

    bool success = false;


    void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        if (incomingConnection != null)
            connectionModel = (ConnectionEntity)incomingConnection.Clone();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (incomingConnection != null)
            await form.Validate();
    }

    private void Connect()
    {
        if (!form.IsValid)
            return;

        if(incomingConnection != null) // if we are editing a connection
        {
            connectionOperations.Add(ConnectionOperationType.Connect);
            MudDialog.Close(DialogResult.Ok(JsonSerializer.Serialize(connectionOperations)));
            
            return;
        }
       

        MudDialog.Close(DialogResult.Ok(JsonSerializer.Serialize(connectionModel)));
    }

    private async Task TestConnection()
    {
        if (!form.IsValid)
            return;

        string? error = await _ConnectionService.TestConnection(connectionModel!);
        if (error != null)
            await _DialogService.ShowMessageBox("Error", error);
        else
            await _DialogService.ShowMessageBox("Success", "Connection successful!");
    }

    private void DeleteConnection()
    {
        connectionOperations.Insert(0, ConnectionOperationType.Delete);
        MudDialog.Close(DialogResult.Ok(JsonSerializer.Serialize(connectionOperations)));

    }

    private void OverwriteConnection()
    {
        incomingConnection!.Copy(connectionModel);
        connectionOperations.Insert(0, ConnectionOperationType.Edit);
    }
}