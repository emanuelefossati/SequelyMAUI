@using Models
@using System.Text.Json
@using SequelyMAUI.Components.Utils
@using Entities


@inject IConnectionService _ConnectionService
@inject IDialogService _DialogService
@inject NavigationManager _NavigationManager

@page "/connections"


<MudPaper Elevation="25">
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Class="mr-5" />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" />
        <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
        <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="Color.Inherit" />
        <MudIconButton Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit" />
        <MudSpacer />
    </MudToolBar>
</MudPaper>

<MudPaper Width="60%" Height="fit-content" Style="margin: auto;" Elevation="0"  Class="rounded-xl">
    <MudTable T="ConnectionEntity" Items="@(_ConnectionService.Connections.OrderByDescending(x => x.Id).ToList())" Hover="true" SortLabel="Sort By" Bordered="true" FixedHeader="true" Class="mt-15" Elevation="5"  Height="@(_ConnectionService.Connections.Count() <= 7 ? "fit-content" : "427px")" @bind-SelectedItem="@connectionSelected"
               OnRowClick="@SelectConnection">
        <HeaderContent>
            <MudTh>@* <MudTableSortLabel SortBy="new Func<ConnectionEntities, object>(x=>x.Name)"> *@Connection Name@* </MudTableSortLabel> *@</MudTh>
            <MudTh>@* <MudTableSortLabel SortBy="new Func<ConnectionEntities, object>(x=>x.Address)"> *@Address@* </MudTableSortLabel> *@</MudTh>
            <MudTh>@* <MudTableSortLabel SortBy="new Func<ConnectionEntities, object>(x=>x.Port!)"> *@Port@* </MudTableSortLabel> *@</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Connection Name">@context!.Name</MudTd>
            <MudTd DataLabel="Address">@context!.Address</MudTd>
            <MudTd DataLabel="Port">@context!.Port</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>
<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Style="position:fixed; bottom:100px;right:200px" OnClick="CreateConnection" />

@code 
    {
    ConnectionEntity? connectionSelected;

    private async Task SelectConnection()
    {
        var options = new DialogOptions { CloseButton = true, DisableBackdropClick = true };
        var parameters = new DialogParameters<ConnectionManagementDialog> { { x => x.incomingConnection, connectionSelected } };
        var dialog = await _DialogService.ShowAsync<ConnectionManagementDialog>("Edit connection", parameters, options);

        var result = await dialog.Result;
        if (result.Canceled)
            return;

        List<ConnectionOperationType> connectionOperations = JsonSerializer.Deserialize<List<ConnectionOperationType>>(result.Data.ToString()!)!;

        if(connectionOperations.First() == ConnectionOperationType.Delete)
        {
            await _ConnectionService.DeleteConnection(connectionSelected!);
            return;
        }

        if(connectionOperations.First() == ConnectionOperationType.Edit)
            await _ConnectionService.EditConnection(connectionSelected!);

        if(connectionOperations.Last() != ConnectionOperationType.Connect)
            return;

        await _ConnectionService.EditConnection(connectionSelected!);

        string? error = await _ConnectionService.ConnectTo(connectionSelected!);
        if (error != null)
        {
            await _DialogService.ShowMessageBox("Error", error);
            return;
        }

        _NavigationManager.NavigateTo("mysql-dashboard");
    }

    private async Task CreateConnection()
    {

        var options = new DialogOptions { CloseButton = true, DisableBackdropClick = true };
        var dialog = await _DialogService.ShowAsync<ConnectionManagementDialog>("New connection", options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        ConnectionEntity connectionCreated = JsonSerializer.Deserialize<ConnectionEntity>(result.Data.ToString()!)!;

        await _ConnectionService.CreateConnection(connectionCreated);

        string? error = await _ConnectionService.ConnectTo(connectionCreated);
        if(error != null)
        {
            await _DialogService.ShowMessageBox("Error", error);
            return;
        }
            
        _NavigationManager.NavigateTo("mysql-dashboard");
        
    }
}